using jouet.Utilities;
using System;
using System.Collections.Generic;
using System.Data.SqlTypes;
using System.Linq;
using System.Reflection.Metadata.Ecma335;
using System.Text;
using System.Threading.Tasks;
using jouet.Collections;

namespace jouet.Chess
{
    public class ClassicMoves : SlidingMoves
    {
        #region struct Ray

        public readonly struct Ray
        {
            private readonly ulong north;
            private readonly ulong northEast;
            private readonly ulong east;
            private readonly ulong southEast;
            private readonly ulong south;
            private readonly ulong southWest;
            private readonly ulong west;
            private readonly ulong northWest;

            public Ray(ulong north, ulong northEast, ulong east, ulong southEast, ulong south, ulong southWest, ulong west, ulong northWest)
            {
                this.north = north;
                this.northEast = northEast;
                this.east = east;
                this.southEast = southEast;
                this.south = south;
                this.southWest = southWest;
                this.west = west;
                this.northWest = northWest;
            }

            public ulong North => north;
            public ulong NorthEast => northEast;
            public ulong East => east;
            public ulong SouthEast => southEast;
            public ulong South => south;
            public ulong SouthWest => southWest;
            public ulong West => west;
            public ulong NorthWest => northWest;
        }

        #endregion

        static ClassicMoves()
        {
            for (int sq = 0; sq < Constants.MAX_SQUARES; ++sq)
            {
                revVectors[63 - sq] = vectors[sq];
            }
        }

        public override ulong GetBishopAttacks(int square, ulong blockers)
        {
            Ray ray = vectors[square];
            ulong bb = BitOps.AndNot(ray.NorthEast, vectors[BitOps.TzCount(ray.NorthEast & blockers)].NorthEast) |
                       BitOps.AndNot(ray.NorthWest, vectors[BitOps.TzCount(ray.NorthWest & blockers)].NorthWest) |
                       BitOps.AndNot(ray.SouthEast, revVectors[BitOps.LzCount(ray.SouthEast & blockers)].SouthEast) |
                       BitOps.AndNot(ray.SouthWest, revVectors[BitOps.LzCount(ray.SouthWest & blockers)].SouthWest);
            return bb;
        }

        public override ulong GetRookAttacks(int square, ulong blockers)
        {
            Ray ray = vectors[square];
            ulong bb = BitOps.AndNot(ray.North, vectors[BitOps.TzCount(ray.North & blockers)].North) |
                       BitOps.AndNot(ray.East, vectors[BitOps.TzCount(ray.East & blockers)].East) |
                       BitOps.AndNot(ray.South, revVectors[BitOps.LzCount(ray.South & blockers)].South) |
                       BitOps.AndNot(ray.West, revVectors[BitOps.LzCount(ray.West & blockers)].West);

            return bb;
        }

        public new static bool IsSupported => true;

        private static readonly UnsafeArray<Ray> vectors = new(Constants.MAX_SQUARES + 1)
        {
            #region vectors data
            new Ray(0x0101010101010100ul, 0x8040201008040200ul, 0x00000000000000FEul, 0x0000000000000000ul,
                    0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul),
            new Ray(0x0202020202020200ul, 0x0080402010080400ul, 0x00000000000000FCul, 0x0000000000000000ul,
                    0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000001ul, 0x0000000000000100ul),
            new Ray(0x0404040404040400ul, 0x0000804020100800ul, 0x00000000000000F8ul, 0x0000000000000000ul,
                    0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000003ul, 0x0000000000010200ul),
            new Ray(0x0808080808080800ul, 0x0000008040201000ul, 0x00000000000000F0ul, 0x0000000000000000ul,
                    0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000007ul, 0x0000000001020400ul),
            new Ray(0x1010101010101000ul, 0x0000000080402000ul, 0x00000000000000E0ul, 0x0000000000000000ul,
                    0x0000000000000000ul, 0x0000000000000000ul, 0x000000000000000Ful, 0x0000000102040800ul),
            new Ray(0x2020202020202000ul, 0x0000000000804000ul, 0x00000000000000C0ul, 0x0000000000000000ul,
                    0x0000000000000000ul, 0x0000000000000000ul, 0x000000000000001Ful, 0x0000010204081000ul),
            new Ray(0x4040404040404000ul, 0x0000000000008000ul, 0x0000000000000080ul, 0x0000000000000000ul,
                    0x0000000000000000ul, 0x0000000000000000ul, 0x000000000000003Ful, 0x0001020408102000ul),
            new Ray(0x8080808080808000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul,
                    0x0000000000000000ul, 0x0000000000000000ul, 0x000000000000007Ful, 0x0102040810204000ul),
            new Ray(0x0101010101010000ul, 0x4020100804020000ul, 0x000000000000FE00ul, 0x0000000000000002ul,
                    0x0000000000000001ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul),
            new Ray(0x0202020202020000ul, 0x8040201008040000ul, 0x000000000000FC00ul, 0x0000000000000004ul,
                    0x0000000000000002ul, 0x0000000000000001ul, 0x0000000000000100ul, 0x0000000000010000ul),
            new Ray(0x0404040404040000ul, 0x0080402010080000ul, 0x000000000000F800ul, 0x0000000000000008ul,
                    0x0000000000000004ul, 0x0000000000000002ul, 0x0000000000000300ul, 0x0000000001020000ul),
            new Ray(0x0808080808080000ul, 0x0000804020100000ul, 0x000000000000F000ul, 0x0000000000000010ul,
                    0x0000000000000008ul, 0x0000000000000004ul, 0x0000000000000700ul, 0x0000000102040000ul),
            new Ray(0x1010101010100000ul, 0x0000008040200000ul, 0x000000000000E000ul, 0x0000000000000020ul,
                    0x0000000000000010ul, 0x0000000000000008ul, 0x0000000000000F00ul, 0x0000010204080000ul),
            new Ray(0x2020202020200000ul, 0x0000000080400000ul, 0x000000000000C000ul, 0x0000000000000040ul,
                    0x0000000000000020ul, 0x0000000000000010ul, 0x0000000000001F00ul, 0x0001020408100000ul),
            new Ray(0x4040404040400000ul, 0x0000000000800000ul, 0x0000000000008000ul, 0x0000000000000080ul,
                    0x0000000000000040ul, 0x0000000000000020ul, 0x0000000000003F00ul, 0x0102040810200000ul),
            new Ray(0x8080808080800000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul,
                    0x0000000000000080ul, 0x0000000000000040ul, 0x0000000000007F00ul, 0x0204081020400000ul),
            new Ray(0x0101010101000000ul, 0x2010080402000000ul, 0x0000000000FE0000ul, 0x0000000000000204ul,
                    0x0000000000000101ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul),
            new Ray(0x0202020202000000ul, 0x4020100804000000ul, 0x0000000000FC0000ul, 0x0000000000000408ul,
                    0x0000000000000202ul, 0x0000000000000100ul, 0x0000000000010000ul, 0x0000000001000000ul),
            new Ray(0x0404040404000000ul, 0x8040201008000000ul, 0x0000000000F80000ul, 0x0000000000000810ul,
                    0x0000000000000404ul, 0x0000000000000201ul, 0x0000000000030000ul, 0x0000000102000000ul),
            new Ray(0x0808080808000000ul, 0x0080402010000000ul, 0x0000000000F00000ul, 0x0000000000001020ul,
                    0x0000000000000808ul, 0x0000000000000402ul, 0x0000000000070000ul, 0x0000010204000000ul),
            new Ray(0x1010101010000000ul, 0x0000804020000000ul, 0x0000000000E00000ul, 0x0000000000002040ul,
                    0x0000000000001010ul, 0x0000000000000804ul, 0x00000000000F0000ul, 0x0001020408000000ul),
            new Ray(0x2020202020000000ul, 0x0000008040000000ul, 0x0000000000C00000ul, 0x0000000000004080ul,
                    0x0000000000002020ul, 0x0000000000001008ul, 0x00000000001F0000ul, 0x0102040810000000ul),
            new Ray(0x4040404040000000ul, 0x0000000080000000ul, 0x0000000000800000ul, 0x0000000000008000ul,
                    0x0000000000004040ul, 0x0000000000002010ul, 0x00000000003F0000ul, 0x0204081020000000ul),
            new Ray(0x8080808080000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul,
                    0x0000000000008080ul, 0x0000000000004020ul, 0x00000000007F0000ul, 0x0408102040000000ul),
            new Ray(0x0101010100000000ul, 0x1008040200000000ul, 0x00000000FE000000ul, 0x0000000000020408ul,
                    0x0000000000010101ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul),
            new Ray(0x0202020200000000ul, 0x2010080400000000ul, 0x00000000FC000000ul, 0x0000000000040810ul,
                    0x0000000000020202ul, 0x0000000000010000ul, 0x0000000001000000ul, 0x0000000100000000ul),
            new Ray(0x0404040400000000ul, 0x4020100800000000ul, 0x00000000F8000000ul, 0x0000000000081020ul,
                    0x0000000000040404ul, 0x0000000000020100ul, 0x0000000003000000ul, 0x0000010200000000ul),
            new Ray(0x0808080800000000ul, 0x8040201000000000ul, 0x00000000F0000000ul, 0x0000000000102040ul,
                    0x0000000000080808ul, 0x0000000000040201ul, 0x0000000007000000ul, 0x0001020400000000ul),
            new Ray(0x1010101000000000ul, 0x0080402000000000ul, 0x00000000E0000000ul, 0x0000000000204080ul,
                    0x0000000000101010ul, 0x0000000000080402ul, 0x000000000F000000ul, 0x0102040800000000ul),
            new Ray(0x2020202000000000ul, 0x0000804000000000ul, 0x00000000C0000000ul, 0x0000000000408000ul,
                    0x0000000000202020ul, 0x0000000000100804ul, 0x000000001F000000ul, 0x0204081000000000ul),
            new Ray(0x4040404000000000ul, 0x0000008000000000ul, 0x0000000080000000ul, 0x0000000000800000ul,
                    0x0000000000404040ul, 0x0000000000201008ul, 0x000000003F000000ul, 0x0408102000000000ul),
            new Ray(0x8080808000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul,
                    0x0000000000808080ul, 0x0000000000402010ul, 0x000000007F000000ul, 0x0810204000000000ul),
            new Ray(0x0101010000000000ul, 0x0804020000000000ul, 0x000000FE00000000ul, 0x0000000002040810ul,
                    0x0000000001010101ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul),
            new Ray(0x0202020000000000ul, 0x1008040000000000ul, 0x000000FC00000000ul, 0x0000000004081020ul,
                    0x0000000002020202ul, 0x0000000001000000ul, 0x0000000100000000ul, 0x0000010000000000ul),
            new Ray(0x0404040000000000ul, 0x2010080000000000ul, 0x000000F800000000ul, 0x0000000008102040ul,
                    0x0000000004040404ul, 0x0000000002010000ul, 0x0000000300000000ul, 0x0001020000000000ul),
            new Ray(0x0808080000000000ul, 0x4020100000000000ul, 0x000000F000000000ul, 0x0000000010204080ul,
                    0x0000000008080808ul, 0x0000000004020100ul, 0x0000000700000000ul, 0x0102040000000000ul),
            new Ray(0x1010100000000000ul, 0x8040200000000000ul, 0x000000E000000000ul, 0x0000000020408000ul,
                    0x0000000010101010ul, 0x0000000008040201ul, 0x0000000F00000000ul, 0x0204080000000000ul),
            new Ray(0x2020200000000000ul, 0x0080400000000000ul, 0x000000C000000000ul, 0x0000000040800000ul,
                    0x0000000020202020ul, 0x0000000010080402ul, 0x0000001F00000000ul, 0x0408100000000000ul),
            new Ray(0x4040400000000000ul, 0x0000800000000000ul, 0x0000008000000000ul, 0x0000000080000000ul,
                    0x0000000040404040ul, 0x0000000020100804ul, 0x0000003F00000000ul, 0x0810200000000000ul),
            new Ray(0x8080800000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul,
                    0x0000000080808080ul, 0x0000000040201008ul, 0x0000007F00000000ul, 0x1020400000000000ul),
            new Ray(0x0101000000000000ul, 0x0402000000000000ul, 0x0000FE0000000000ul, 0x0000000204081020ul,
                    0x0000000101010101ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul),
            new Ray(0x0202000000000000ul, 0x0804000000000000ul, 0x0000FC0000000000ul, 0x0000000408102040ul,
                    0x0000000202020202ul, 0x0000000100000000ul, 0x0000010000000000ul, 0x0001000000000000ul),
            new Ray(0x0404000000000000ul, 0x1008000000000000ul, 0x0000F80000000000ul, 0x0000000810204080ul,
                    0x0000000404040404ul, 0x0000000201000000ul, 0x0000030000000000ul, 0x0102000000000000ul),
            new Ray(0x0808000000000000ul, 0x2010000000000000ul, 0x0000F00000000000ul, 0x0000001020408000ul,
                    0x0000000808080808ul, 0x0000000402010000ul, 0x0000070000000000ul, 0x0204000000000000ul),
            new Ray(0x1010000000000000ul, 0x4020000000000000ul, 0x0000E00000000000ul, 0x0000002040800000ul,
                    0x0000001010101010ul, 0x0000000804020100ul, 0x00000F0000000000ul, 0x0408000000000000ul),
            new Ray(0x2020000000000000ul, 0x8040000000000000ul, 0x0000C00000000000ul, 0x0000004080000000ul,
                    0x0000002020202020ul, 0x0000001008040201ul, 0x00001F0000000000ul, 0x0810000000000000ul),
            new Ray(0x4040000000000000ul, 0x0080000000000000ul, 0x0000800000000000ul, 0x0000008000000000ul,
                    0x0000004040404040ul, 0x0000002010080402ul, 0x00003F0000000000ul, 0x1020000000000000ul),
            new Ray(0x8080000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul,
                    0x0000008080808080ul, 0x0000004020100804ul, 0x00007F0000000000ul, 0x2040000000000000ul),
            new Ray(0x0100000000000000ul, 0x0200000000000000ul, 0x00FE000000000000ul, 0x0000020408102040ul,
                    0x0000010101010101ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul),
            new Ray(0x0200000000000000ul, 0x0400000000000000ul, 0x00FC000000000000ul, 0x0000040810204080ul,
                    0x0000020202020202ul, 0x0000010000000000ul, 0x0001000000000000ul, 0x0100000000000000ul),
            new Ray(0x0400000000000000ul, 0x0800000000000000ul, 0x00F8000000000000ul, 0x0000081020408000ul,
                    0x0000040404040404ul, 0x0000020100000000ul, 0x0003000000000000ul, 0x0200000000000000ul),
            new Ray(0x0800000000000000ul, 0x1000000000000000ul, 0x00F0000000000000ul, 0x0000102040800000ul,
                    0x0000080808080808ul, 0x0000040201000000ul, 0x0007000000000000ul, 0x0400000000000000ul),
            new Ray(0x1000000000000000ul, 0x2000000000000000ul, 0x00E0000000000000ul, 0x0000204080000000ul,
                    0x0000101010101010ul, 0x0000080402010000ul, 0x000F000000000000ul, 0x0800000000000000ul),
            new Ray(0x2000000000000000ul, 0x4000000000000000ul, 0x00C0000000000000ul, 0x0000408000000000ul,
                    0x0000202020202020ul, 0x0000100804020100ul, 0x001F000000000000ul, 0x1000000000000000ul),
            new Ray(0x4000000000000000ul, 0x8000000000000000ul, 0x0080000000000000ul, 0x0000800000000000ul,
                    0x0000404040404040ul, 0x0000201008040201ul, 0x003F000000000000ul, 0x2000000000000000ul),
            new Ray(0x8000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul,
                    0x0000808080808080ul, 0x0000402010080402ul, 0x007F000000000000ul, 0x4000000000000000ul),
            new Ray(0x0000000000000000ul, 0x0000000000000000ul, 0xFE00000000000000ul, 0x0002040810204080ul,
                    0x0001010101010101ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul),
            new Ray(0x0000000000000000ul, 0x0000000000000000ul, 0xFC00000000000000ul, 0x0004081020408000ul,
                    0x0002020202020202ul, 0x0001000000000000ul, 0x0100000000000000ul, 0x0000000000000000ul),
            new Ray(0x0000000000000000ul, 0x0000000000000000ul, 0xF800000000000000ul, 0x0008102040800000ul,
                    0x0004040404040404ul, 0x0002010000000000ul, 0x0300000000000000ul, 0x0000000000000000ul),
            new Ray(0x0000000000000000ul, 0x0000000000000000ul, 0xF000000000000000ul, 0x0010204080000000ul,
                    0x0008080808080808ul, 0x0004020100000000ul, 0x0700000000000000ul, 0x0000000000000000ul),
            new Ray(0x0000000000000000ul, 0x0000000000000000ul, 0xE000000000000000ul, 0x0020408000000000ul,
                    0x0010101010101010ul, 0x0008040201000000ul, 0x0F00000000000000ul, 0x0000000000000000ul),
            new Ray(0x0000000000000000ul, 0x0000000000000000ul, 0xC000000000000000ul, 0x0040800000000000ul,
                    0x0020202020202020ul, 0x0010080402010000ul, 0x1F00000000000000ul, 0x0000000000000000ul),
            new Ray(0x0000000000000000ul, 0x0000000000000000ul, 0x8000000000000000ul, 0x0080000000000000ul,
                    0x0040404040404040ul, 0x0020100804020100ul, 0x3F00000000000000ul, 0x0000000000000000ul),
            new Ray(0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul,
                    0x0080808080808080ul, 0x0040201008040201ul, 0x7F00000000000000ul, 0x0000000000000000ul),
            new Ray(0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul,
                    0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul, 0x0000000000000000ul)
            #endregion
        };
        private static readonly UnsafeArray<Ray> revVectors = new(Constants.MAX_SQUARES + 1);

    }
}
